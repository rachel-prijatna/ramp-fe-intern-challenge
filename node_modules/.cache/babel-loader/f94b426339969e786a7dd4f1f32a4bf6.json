{"ast":null,"code":"var _jsxFileName = \"/Users/rachelprijatna/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactions(prev => {\n        const existingIds = new Set(prev.map(txn => txn.id));\n        const newTxns = paginatedTransactions.data.filter(txn => !existingIds.has(txn.id));\n        return [...prev, ...newTxns];\n      });\n    }\n  }, [paginatedTransactions]);\n  useEffect(() => {\n    if (transactionsByEmployee && selectedEmployeeId !== null) {\n      setTransactions(transactionsByEmployee);\n    }\n  }, [transactionsByEmployee, selectedEmployeeId]);\n  const handleToggleApproval = useCallback(transactionId => {\n    setTransactions(prev => prev.map(txn => txn.id === transactionId ? { ...txn,\n      approved: !txn.approved\n    } : txn));\n  }, []);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setSelectedEmployeeId(null);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setSelectedEmployeeId(employeeId);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          onToggleApproval: handleToggleApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), selectedEmployeeId === null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || isLoading,\n          onClick: loadAllTransactions,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SbcRlBUCSZckY6EdIpRpBeCtjP0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployeeId","setSelectedEmployeeId","transactions","setTransactions","prev","existingIds","Set","map","txn","id","newTxns","filter","has","handleToggleApproval","transactionId","approved","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/rachelprijatna/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null)\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  useEffect(() => {\n    if (paginatedTransactions?.data) {\n      setTransactions(prev => {\n        const existingIds = new Set(prev.map(txn => txn.id))\n        const newTxns = paginatedTransactions.data.filter(txn => !existingIds.has(txn.id))\n        return [...prev, ...newTxns]\n      })\n    }\n  }, [paginatedTransactions])\n\n  useEffect(() => {\n    if (transactionsByEmployee && selectedEmployeeId !== null) {\n      setTransactions(transactionsByEmployee)\n    }\n  }, [transactionsByEmployee, selectedEmployeeId])\n\n  const handleToggleApproval = useCallback((transactionId: string) => {\n    setTransactions(prev =>\n      prev.map(txn =>\n        txn.id === transactionId ? { ...txn, approved: !txn.approved } : txn\n      )\n    )\n  }, [])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setSelectedEmployeeId(null)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setSelectedEmployeeId(employeeId)\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions\n            transactions={transactions}\n            onToggleApproval={handleToggleApproval}\n          />\n\n          {selectedEmployeeId === null &&\n            paginatedTransactions?.nextPage != null && (\n              <button\n                className=\"RampButton\"\n                disabled={paginatedTransactionsUtils.loading || isLoading}\n                onClick={loadAllTransactions}\n              >\n                View More\n              </button>\n            )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}