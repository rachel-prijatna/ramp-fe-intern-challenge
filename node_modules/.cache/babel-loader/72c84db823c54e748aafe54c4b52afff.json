{"ast":null,"code":"var _jsxFileName = \"/Users/rachelprijatna/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Keep allTransactions in sync with paginatedTransactions\n\n  useEffect(() => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setAllTransactions(paginatedTransactions.data);\n    }\n  }, [paginatedTransactions]); // Filter transactions based on selected employee\n\n  const transactions = useMemo(() => {\n    if (selectedEmployee && selectedEmployee !== EMPTY_EMPLOYEE.id) {\n      return allTransactions.filter(txn => txn.employeeId === selectedEmployee);\n    }\n\n    return allTransactions;\n  }, [allTransactions, selectedEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setSelectedEmployee(null);\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setSelectedEmployee(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Handler to toggle approval\n\n  const handleToggleApproval = transactionId => {\n    setAllTransactions(prev => prev.map(txn => txn.id === transactionId ? { ...txn,\n      approved: !txn.approved\n    } : txn));\n  };\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HppV01QHw2EV1CxF76vvg4F3rsc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","selectedEmployee","setSelectedEmployee","transactions","id","filter","txn","employeeId","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","fetchById","handleToggleApproval","transactionId","prev","map","approved","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/rachelprijatna/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction, RequestByEmployeeParams } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n  const [selectedEmployee, setSelectedEmployee] = useState<string | null>(null)\n\n// Keep allTransactions in sync with paginatedTransactions\n  useEffect(() => {\n    if (paginatedTransactions?.data) {\n      setAllTransactions(paginatedTransactions.data)\n    }\n  }, [paginatedTransactions])\n\n  // Filter transactions based on selected employee\n  const transactions = useMemo(() => {\n    if (selectedEmployee && selectedEmployee !== EMPTY_EMPLOYEE.id) {\n      return allTransactions.filter(txn => txn.employeeId === selectedEmployee)\n    }\n    return allTransactions\n  }, [allTransactions, selectedEmployee])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n    setSelectedEmployee(null)\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      setSelectedEmployee(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  // Handler to toggle approval\n  const handleToggleApproval = (transactionId: string) => {\n    setAllTransactions(prev =>\n      prev.map(txn =>\n        txn.id === transactionId ? { ...txn, approved: !txn.approved } : txn\n      )\n    )\n  }\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions()\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions}/>\n\n          {transactions !== null && paginatedTransactions?.nextPage != null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}